{
  "address": "0x87147E314F01Ec6D5b6bBc7A06224D0FE914756A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2b4f38031d187967d4b37b6b6c23f6fefcb2dd7a937ea3f7a6499fcffb722ec2",
  "receipt": {
    "to": null,
    "from": "0xd4eb00a3Cc794143A5315fb28fA0878947599b7f",
    "contractAddress": "0x87147E314F01Ec6D5b6bBc7A06224D0FE914756A",
    "transactionIndex": 96,
    "gasUsed": "812329",
    "logsBloom": "0x
    "blockHash": "0x8a15581764e622e06fe7ab76b8a703c723b41dc3f29054fbad6386671a414094",
    "transactionHash": "0x2b4f38031d187967d4b37b6b6c23f6fefcb2dd7a937ea3f7a6499fcffb722ec2",
    "logs": [],
    "blockNumber": 8092687,
    "cumulativeGasUsed": "18756361",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "8e353d30a57faef99ac80280a0b02eaa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"ATM_Shifat\",\"details\":\"This implements price feeds as our library. The constructor has an address type parameter\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"Checks the amount sent to the contract. If enough money is sent , contract gets the fund else the transaction gets reverted. It uses pric feed to get the convertion rate from ETH to USD\"},\"withdraw()\":{\"details\":\"Only the owner can call this function If enough money is sent , contract gets the fund else the transaction gets reverted. It uses pric feed to get the convertion rate from ETH to USD\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds the contract\"},\"withdraw()\":{\"notice\":\"This function withdraws funds from the contract\"}},\"notice\":\"This is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get Funds from Users\\n//Withdraw funds\\n//set a minimum funding value in USD\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe_NotOwner(); // custom error\\n\\n/** @title A contract for crowd funding\\n * @author ATM_Shifat\\n * @notice This is to demo a sample funding contract\\n * @dev This implements price feeds as our library. The constructor has an address type parameter\\n */\\n\\ncontract FundMe {\\n    //Type declaration\\n    using PriceConverter for uint256;\\n\\n    //State variables\\n    uint256 public constant MINIMUM_USD = 5 * 1e18; // 1 * 10 ** 18\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmount;\\n    address public immutable i_owner;\\n    AggregatorV3Interface public priceFeed;\\n\\n    //Modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe_NotOwner();\\n        }\\n        _;\\n    }\\n\\n    //Function Order\\n    //constractor\\n    //receive\\n    //fallback\\n    //external\\n    //public\\n    //internal\\n    //private\\n    //view/pure\\n\\n    constructor(address priceFeedAdress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAdress);\\n    }\\n\\n    //what happens if someone sends this contract without calling the fund function?\\n    //receive , fallback\\n    //Explanation on : https://solidity-by-example.org/fallback/\\n    // Ether is sent to the contract\\n    //         is msg.data empty?\\n    //             /   \\\\\\n    //           yes    no\\n    //           /         \\\\\\n    //       receive()?  fallback()\\n    //        /    \\\\\\n    //     yes      not\\n    //     /           \\\\\\n    // receive()    fallback()\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds the contract\\n     * @dev Checks the amount sent to the contract.\\n     * If enough money is sent , contract gets the fund else the transaction gets reverted.\\n     * It uses pric feed to get the convertion rate from ETH to USD\\n     */\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough ether\\\"\\n        );\\n\\n        funders.push(msg.sender);\\n        addressToAmount[msg.sender] = msg.value;\\n    }\\n\\n    /**\\n     * @notice This function withdraws funds from the contract\\n     * @dev Only the owner can call this function\\n     * If enough money is sent , contract gets the fund else the transaction gets reverted.\\n     * It uses pric feed to get the convertion rate from ETH to USD\\n     */\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n\\n            addressToAmount[funder] = 0;\\n        }\\n\\n        funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbe9093ba9b348a1f678143f260e563cc13c40f14acfb012433a5f75c2964c791\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/** @title A Library to aquire price feed from an Aggregator contract\\n * @author ATM_Shifat\\n * @notice Price feed library\\n * @dev PriceConverter is a library that is being used in the FundMe contract\\n */\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        //ABI\\n        //Eth/USD price feed contract address\\n        //\\t0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        //price has 8 decimals\\n        //Ether has 18 decimals as 1 eth = 1e18 wei\\n        //10 additional 0 is to match the length\\n\\n        // return uint256(price);\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getDecimals(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        return priceFeed.decimals();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x70c1fe8e1f218ad3fd0d045b91ac04af5780008f2676c59235788afe540c0bee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610eae380380610eae83398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d4f61015f600039600081816102eb015261055d0152610d4f6000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633c7e7d281461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610795565b6102d1565b6040516100c191906107db565b60405180910390f35b3480156100d657600080fd5b506100df6102e9565b005b3480156100ed57600080fd5b506100f6610529565b60405161010391906107db565b60405180910390f35b34801561011857600080fd5b50610121610535565b60405161012e9190610855565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055b565b604051610163919061087f565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108c6565b61057f565b6040516101a0919061087f565b60405180910390f35b674563918244f400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105be90919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610950565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036e576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041957600080828154811061039357610392610970565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610411906109ce565b915050610371565b50600067ffffffffffffffff81111561043557610434610a16565b5b6040519080825280602002602001820160405280156104635781602001602082028036833780820191505090505b506000908051906020019061047992919061068b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a090610a76565b60006040518083038185875af1925050503d80600081146104dd576040519150601f19603f3d011682016040523d82523d6000602084013e6104e2565b606091505b5050905080610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051d90610ad7565b60405180910390fd5b50565b674563918244f4000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061058f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105ca836105fa565b90506000670de0b6b3a764000085836105e39190610af7565b6105ed9190610b68565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190610c26565b5050509150506402540be400816106839190610ca1565b915050919050565b828054828255906000526020600020908101928215610704579160200282015b828111156107035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ab565b5b5090506107119190610715565b5090565b5b8082111561072e576000816000905550600101610716565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076282610737565b9050919050565b61077281610757565b811461077d57600080fd5b50565b60008135905061078f81610769565b92915050565b6000602082840312156107ab576107aa610732565b5b60006107b984828501610780565b91505092915050565b6000819050919050565b6107d5816107c2565b82525050565b60006020820190506107f060008301846107cc565b92915050565b6000819050919050565b600061081b61081661081184610737565b6107f6565b610737565b9050919050565b600061082d82610800565b9050919050565b600061083f82610822565b9050919050565b61084f81610834565b82525050565b600060208201905061086a6000830184610846565b92915050565b61087981610757565b82525050565b60006020820190506108946000830184610870565b92915050565b6108a3816107c2565b81146108ae57600080fd5b50565b6000813590506108c08161089a565b92915050565b6000602082840312156108dc576108db610732565b5b60006108ea848285016108b1565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682065746865720000000000000000600082015250565b600061093a6018836108f3565b915061094582610904565b602082019050919050565b600060208201905081810360008301526109698161092d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d9826107c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0b57610a0a61099f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a60600083610a45565b9150610a6b82610a50565b600082019050919050565b6000610a8182610a53565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ac1600b836108f3565b9150610acc82610a8b565b602082019050919050565b60006020820190508181036000830152610af081610ab4565b9050919050565b6000610b02826107c2565b9150610b0d836107c2565b9250828202610b1b816107c2565b91508282048414831517610b3257610b3161099f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b73826107c2565b9150610b7e836107c2565b925082610b8e57610b8d610b39565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bb881610b99565b8114610bc357600080fd5b50565b600081519050610bd581610baf565b92915050565b6000819050919050565b610bee81610bdb565b8114610bf957600080fd5b50565b600081519050610c0b81610be5565b92915050565b600081519050610c208161089a565b92915050565b600080600080600060a08688031215610c4257610c41610732565b5b6000610c5088828901610bc6565b9550506020610c6188828901610bfc565b9450506040610c7288828901610c11565b9350506060610c8388828901610c11565b9250506080610c9488828901610bc6565b9150509295509295909350565b6000610cac82610bdb565b9150610cb783610bdb565b9250828202610cc581610bdb565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cfd57610cfc61099f565b5b8282058414831517610d1257610d1161099f565b5b509291505056fea26469706673582212200e342d20231b849f7b91cfdb8edec995b4fe79ed41aecabf7bceaad7a0fb616b64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633c7e7d281461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610795565b6102d1565b6040516100c191906107db565b60405180910390f35b3480156100d657600080fd5b506100df6102e9565b005b3480156100ed57600080fd5b506100f6610529565b60405161010391906107db565b60405180910390f35b34801561011857600080fd5b50610121610535565b60405161012e9190610855565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055b565b604051610163919061087f565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108c6565b61057f565b6040516101a0919061087f565b60405180910390f35b674563918244f400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105be90919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610950565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036e576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041957600080828154811061039357610392610970565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610411906109ce565b915050610371565b50600067ffffffffffffffff81111561043557610434610a16565b5b6040519080825280602002602001820160405280156104635781602001602082028036833780820191505090505b506000908051906020019061047992919061068b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a090610a76565b60006040518083038185875af1925050503d80600081146104dd576040519150601f19603f3d011682016040523d82523d6000602084013e6104e2565b606091505b5050905080610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051d90610ad7565b60405180910390fd5b50565b674563918244f4000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061058f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105ca836105fa565b90506000670de0b6b3a764000085836105e39190610af7565b6105ed9190610b68565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190610c26565b5050509150506402540be400816106839190610ca1565b915050919050565b828054828255906000526020600020908101928215610704579160200282015b828111156107035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ab565b5b5090506107119190610715565b5090565b5b8082111561072e576000816000905550600101610716565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076282610737565b9050919050565b61077281610757565b811461077d57600080fd5b50565b60008135905061078f81610769565b92915050565b6000602082840312156107ab576107aa610732565b5b60006107b984828501610780565b91505092915050565b6000819050919050565b6107d5816107c2565b82525050565b60006020820190506107f060008301846107cc565b92915050565b6000819050919050565b600061081b61081661081184610737565b6107f6565b610737565b9050919050565b600061082d82610800565b9050919050565b600061083f82610822565b9050919050565b61084f81610834565b82525050565b600060208201905061086a6000830184610846565b92915050565b61087981610757565b82525050565b60006020820190506108946000830184610870565b92915050565b6108a3816107c2565b81146108ae57600080fd5b50565b6000813590506108c08161089a565b92915050565b6000602082840312156108dc576108db610732565b5b60006108ea848285016108b1565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682065746865720000000000000000600082015250565b600061093a6018836108f3565b915061094582610904565b602082019050919050565b600060208201905081810360008301526109698161092d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d9826107c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0b57610a0a61099f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a60600083610a45565b9150610a6b82610a50565b600082019050919050565b6000610a8182610a53565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ac1600b836108f3565b9150610acc82610a8b565b602082019050919050565b60006020820190508181036000830152610af081610ab4565b9050919050565b6000610b02826107c2565b9150610b0d836107c2565b9250828202610b1b816107c2565b91508282048414831517610b3257610b3161099f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b73826107c2565b9150610b7e836107c2565b925082610b8e57610b8d610b39565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bb881610b99565b8114610bc357600080fd5b50565b600081519050610bd581610baf565b92915050565b6000819050919050565b610bee81610bdb565b8114610bf957600080fd5b50565b600081519050610c0b81610be5565b92915050565b600081519050610c208161089a565b92915050565b600080600080600060a08688031215610c4257610c41610732565b5b6000610c5088828901610bc6565b9550506020610c6188828901610bfc565b9450506040610c7288828901610c11565b9350506060610c8388828901610c11565b9250506080610c9488828901610bc6565b9150509295509295909350565b6000610cac82610bdb565b9150610cb783610bdb565b9250828202610cc581610bdb565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cfd57610cfc61099f565b5b8282058414831517610d1257610d1161099f565b5b509291505056fea26469706673582212200e342d20231b849f7b91cfdb8edec995b4fe79ed41aecabf7bceaad7a0fb616b64736f6c63430008110033",
  "devdoc": {
    "author": "ATM_Shifat",
    "details": "This implements price feeds as our library. The constructor has an address type parameter",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "Checks the amount sent to the contract. If enough money is sent , contract gets the fund else the transaction gets reverted. It uses pric feed to get the convertion rate from ETH to USD"
      },
      "withdraw()": {
        "details": "Only the owner can call this function If enough money is sent , contract gets the fund else the transaction gets reverted. It uses pric feed to get the convertion rate from ETH to USD"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds the contract"
      },
      "withdraw()": {
        "notice": "This function withdraws funds from the contract"
      }
    },
    "notice": "This is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 325,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 329,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 334,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}